{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"num",
				"num_neurons"
			],
			[
				"dis",
				"distortions"
			],
			[
				"Fo",
				"FourthLayer"
			],
			[
				"bias",
				"bias_scalar"
			],
			[
				"che",
				"checkpoint_name"
			],
			[
				"path",
				"patchsize"
			],
			[
				"get",
				"get_arguments"
			],
			[
				"adversa",
				"adversarial_features"
			],
			[
				"plot",
				"plot_filters"
			],
			[
				"att",
				"attacked_images"
			],
			[
				"batch_s",
				"test_batch_size"
			],
			[
				"x_",
				"x_min"
			],
			[
				"atta",
				"attack_params"
			],
			[
				"data",
				"data_params"
			],
			[
				"rand",
				"rand_perturb"
			],
			[
				"random",
				"random_start"
			],
			[
				"step",
				"step_size"
			],
			[
				"pert",
				"perturbation"
			],
			[
				"mod",
				"modReLU1"
			],
			[
				"comp",
				"comp_conv1"
			],
			[
				"Ltf",
				"Ltf_interpolated"
			],
			[
				"ifft",
				"ifftshift"
			],
			[
				"plt",
				"plt"
			],
			[
				"keep",
				"keep_orig_test_cfo"
			],
			[
				"df",
				"df_aug_train"
			],
			[
				"aug_type",
				"aug_type_cfo"
			],
			[
				"x",
				"x_test"
			],
			[
				"dict",
				"dict_wifi_no_aug"
			],
			[
				"augm",
				"augment_cfo"
			],
			[
				"test",
				"testing_setup"
			],
			[
				"ex",
				"exp_i"
			],
			[
				"exp",
				"experiment_setup"
			],
			[
				"seed_",
				"seed_test_day"
			],
			[
				"seed_test",
				"seed_test_day"
			],
			[
				"angles_em",
				"angles_embed_avg"
			],
			[
				"whi",
				"which_layer"
			],
			[
				"layer",
				"layer_ord"
			],
			[
				"tem",
				"temporal_index"
			],
			[
				"ac",
				"activation_count"
			],
			[
				"au",
				"augment_with_channel"
			],
			[
				"sam",
				"sampling_rate"
			],
			[
				"seed_au",
				"seed_aug_cfo"
			],
			[
				"ver",
				"verbose_train"
			],
			[
				"wifi",
				"dict_wifi"
			],
			[
				"features",
				"features_test_classes"
			],
			[
				"x_tes",
				"x_test_classes"
			],
			[
				"eq",
				"equalize_train_before"
			],
			[
				"train",
				"training-eps"
			],
			[
				"def",
				"def_id"
			],
			[
				"ad",
				"add_argument"
			],
			[
				"arch",
				"architecture"
			],
			[
				"im",
				"img_input"
			],
			[
				"cl",
				"clip_max"
			],
			[
				"clip",
				"clip_min"
			],
			[
				"mul",
				"multiple_day_fingerprint"
			],
			[
				"augme",
				"augment_channel"
			],
			[
				"num_au",
				"num_aug_train"
			],
			[
				"clas",
				"class_indices"
			],
			[
				"decay",
				"decay_rate"
			],
			[
				"signal_faded_",
				"signal_faded_cfo"
			],
			[
				"signal",
				"signal_eq"
			],
			[
				"pre",
				"preamble_eq"
			],
			[
				"biddi",
				"bidding_dict"
			],
			[
				"who",
				"who_can_bid"
			],
			[
				"who_",
				"who_offered"
			],
			[
				"y_train",
				"y_train_aug"
			],
			[
				"x_t",
				"x_train_aug"
			],
			[
				"com",
				"complex_train"
			],
			[
				"y_",
				"y_test_orig"
			],
			[
				"y_t",
				"y_train_orig"
			],
			[
				"x_tra",
				"x_train_orig"
			],
			[
				"sign",
				"signal_ch"
			],
			[
				"nu",
				"num_aug_train"
			],
			[
				"chec",
				"check_signal_power_effect"
			],
			[
				"fi",
				"fig_name"
			],
			[
				"ph",
				"phy_method_cfo"
			],
			[
				"augmen",
				"augment_channel"
			],
			[
				"equ",
				"equalize_test"
			],
			[
				"add",
				"add_channel"
			],
			[
				"nois",
				"noise_method"
			],
			[
				"channel",
				"channel_method"
			],
			[
				"complex_tra",
				"complex_train_removed_cfo"
			],
			[
				"dic",
				"dict_wifi"
			],
			[
				"ar",
				"architecture"
			],
			[
				"dif",
				"different_day_scenario"
			],
			[
				"pivot_",
				"pivot_index-1"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"max",
				"maxSum"
			],
			[
				"Four",
				"FourLayerModelThresholded"
			],
			[
				"defe",
				"defense_epsilon"
			],
			[
				"usi",
				"using_threshold"
			],
			[
				"sp_frontend_",
				"sp_frontend_threshold"
			],
			[
				"Spars",
				"sparsifying"
			],
			[
				"with",
				"with_spfe"
			],
			[
				"wi",
				"with_defense"
			],
			[
				"Fou",
				"FourLayerModel"
			],
			[
				"total",
				"total_loss"
			],
			[
				"end",
				"end_points"
			],
			[
				"re",
				"reuse"
			],
			[
				"game",
				"game_score"
			],
			[
				"dro",
				"drop"
			],
			[
				"card",
				"card_orders"
			],
			[
				"legal",
				"legal_actions"
			],
			[
				"lst",
				"lstm_linear"
			],
			[
				"high",
				"highest_offer"
			],
			[
				"trum",
				"trump_count"
			],
			[
				"hi",
				"highest_offer"
			],
			[
				"ro",
				"number_rounds"
			],
			[
				"trump",
				"trump_condition"
			],
			[
				"turn",
				"turn_family"
			],
			[
				"play",
				"playable_cards"
			],
			[
				"pla",
				"playable_cards"
			],
			[
				"Trum",
				"trump_condition"
			],
			[
				"dr",
				"drawn_card"
			],
			[
				"window",
				"windows_imag"
			],
			[
				"dat",
				"data_input"
			],
			[
				"NO",
				"NOISE_METHOD"
			],
			[
				"CHANNEL",
				"CHANNEL_METHOD"
			],
			[
				"dely",
				"delay_seed"
			],
			[
				"CHA",
				"CHANNEL_TYPE_TEST"
			],
			[
				"NUM",
				"NUM_CFO_AUG_TEST"
			],
			[
				"NUM_CF",
				"NUM_CFO_AUG_TEST"
			],
			[
				"ep",
				"epochs"
			],
			[
				"KE",
				"KEEP_ORIG_TEST"
			],
			[
				"x_train",
				"x_train_orig"
			],
			[
				"CHANN",
				"CHANNEL_TYPE_TRAIN"
			],
			[
				"pertu",
				"perturbations"
			],
			[
				"check",
				"checkpoint_out"
			]
		]
	},
	"buffers":
	[
		{
			"file": "train_test_functions.py",
			"settings":
			{
				"buffer_size": 7716,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"XeLaTeX"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Preferences: Package Control Settings â€“ User"
			],
			[
				"rai",
				"RainbowBrackets: tinct view"
			],
			[
				"",
				"AutoPEP8: Preview Changes"
			],
			[
				"pac",
				"Preferences: RainbowBrackets Settings"
			],
			[
				"reload",
				"LiveReload: Self test"
			],
			[
				"ma",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: Install Package",
				"Package Control: Install Package"
			],
			[
				"markdo",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"subl",
				"Preferences: SublimeLinter Settings"
			],
			[
				"sublime",
				"Preferences: SublimeLinter Settings"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 421.0,
		"history":
		[
			"done",
			"install package",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/metehan/Desktop/lab/deep_adv"
	],
	"file_history":
	[
		"/Users/metehan/Desktop/lab/cvx_demixing/utils/reconstruct_extract_patch.py",
		"/Users/metehan/Library/Application Support/Sublime Text 3/Packages/AutoPEP8/AutoPep8.sublime-settings",
		"/Users/metehan/Library/Application Support/Sublime Text 3/Packages/User/AutoPep8.sublime-settings",
		"/Users/metehan/Desktop/lab/deep_adv/train_test_functions.py",
		"/Users/metehan/Library/Application Support/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/Users/metehan/Library/Application Support/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/Users/metehan/Library/Application Support/Sublime Text 3/Installed Packages/RainbowBrackets.sublime-package",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/models/old_net.py",
		"/Users/metehan/Desktop/lab/adv_ml/CIFAR10/analysis/attack_verification.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/parameters.py",
		"/Users/metehan/Desktop/lab/deep_adv/adversary/norm_ball_attacks.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/analysis/plotter.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/models/lenet.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/main.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/read_datasets.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/main.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/main_activation_sparsity.py",
		"/Users/metehan/Desktop/lab/adv_ml/train_test_functions_activation_sparsity.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/parameters.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/parameters.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/main.py",
		"/Users/metehan/Desktop/lab/adv_ml/train_test_functions.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/models/resnet_new.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/read_datasets.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/models/lenet.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/models/asd.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/models/models_mnist.py",
		"/Users/metehan/Desktop/lab/adv_ml/utils/plot_settings.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/analysis/plotter.py",
		"/Users/metehan/Desktop/lab/adv_ml/__init__.py",
		"/Users/metehan/Desktop/lab/torch-adversarial/main.py",
		"/Users/metehan/Desktop/lab/torch-adversarial/attack.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/CIFAR10/models/resnet_new.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/mnist/parameters.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/mnist/activation_sparsity/parameters.py",
		"/Users/metehan/Desktop/lab/cifar10_challenge-master/train.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/MNIST/models/lenet.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/MNIST/parameters.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/train_test_functions.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/MNIST/main.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/adversary/norm_ball_attacks.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/main_demixed.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/read_datasets.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/run_attack.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/models/resnet.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/models/untitled",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/boost_existing_ehats.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/mnist/standard/parameters.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/mnist/analysis/plotter.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/mnist/standard/main.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/mnist/activation_sparsity/main.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/MNIST/read_datasets.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/utils/utils.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/test_quarter_whitebox.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/learn_patch_dict.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/analysis/attack_verification.py",
		"/Users/metehan/Google Drive/UCSB/CourseWork/Others/git-tutorials/untitled.tex",
		"/Users/metehan/Google Drive/UCSB/CourseWork/Others/Bash-Tutorials/git-tutorials/untitled.tex",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/reconstruction_methods/tropp.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/reconstruction_methods/tropp_weighted_sign.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/reconstruction_methods/tropp_weighted.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/neuralnet/models_mnist.py",
		"/Users/metehan/Desktop/lab/adv_mnist_march/utils.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/standard/parameters.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/utils.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/standard/main_demixed.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/cifar10/standard/main.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/neuralnet/train_test_functions.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/neuralnet/train_test_functions_activation_sparsity.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/read_datasets.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/datasets.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/mnist/standard/main_demixed.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/cifar10/standard/parameters.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/mnist/read_datasets.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/cifar10/read_datasets.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/adversary/norm_ball_attacks.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/standard/main.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/neuralnet/train_test_functions.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/neuralnet/models_cifar10.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/MNIST/standard/main.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/neuralnet/models_mnist.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/standard/neuralnet/models.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/standard/neuralnet/train_test_functions.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/cifar10/standard/neuralnet/train_test_functions.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/mnist/standard/parameters.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/mnist-fashion/__init__.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/mnist-fashion/standard/main.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/standard/datasets.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/adversary/l_p.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/adversary/l_infinity.py",
		"/Users/metehan/Google Drive/RFML/Journal/main.tex",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/analysis/plot_perturbations.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/activation_sparsity/main.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/activation_sparsity/neuralnet/train_test_functions.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/activation_sparsity/neuralnet/models.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/standard/neuralnet/train_test_functions.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/standard/main.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/standard/neuralnet/__init__.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/activation_sparsity/parameters.py",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/standard/parameters.py",
		"/Users/metehan/Desktop/Torch-Network-Sparsity",
		"/Users/metehan/Desktop/lab/torch-activation-sparsity/standard/neuralnet/models.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/adversary/l_infinity.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/activation_sparsity/parameters.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/activation_sparsity/__init__.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/__init__.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/activation_sparsity/main.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/activation_sparsity/neuralnet/models.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/activation_sparsity/neuralnet/train_test_functions.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/standard/main.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/standard/neuralnet/train_test_functions.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/standard/parameters.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/activation-sparsity-mnist/parameters.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/activation-sparsity-mnist/neuralnet/__init__.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/mnist_adv_pytorch/neural_models.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/mnist_adv_pytorch/attack.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/mnist_adv_pytorch/neuralnet/__init__.py",
		"/Users/metehan/Scripts/login_lab_tmux.sh",
		"/Users/metehan/Scripts/loglab.sh",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/mnist_adv_pytorch/nn_actions.py",
		"/Users/metehan/Google Drive/UCSB/Research/Adversarial Machine Learning/Torch-Network-Sparsity/mnist_adv_pytorch/README.md",
		"/Users/metehan/Desktop/My_Website/content/tr/home/contact.md",
		"/Users/metehan/Desktop/My_Website/content/tr/home/about.md",
		"/Users/metehan/Desktop/My_Website/content/en/home/index.md",
		"/Users/metehan/Google Drive/UCSB/Career_PHD/resume/resume_long.tex",
		"/Users/metehan/Google Drive/UCSB/Career_PHD/resume/resume_1page.tex",
		"/Users/metehan/Google Drive/UCSB/Career_PHD/resume/resume_2.tex",
		"/Users/metehan/Desktop/My_Website/content/en/publication/cekic-2020-robust/cite.bib"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "train_test_functions.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 7716,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"SL.190.region_keys":
							[
								"SL.pylint.Highlights.|e89a1bc450e5a0c134740558d3b1376b196ccff0ed825cea3e2046023097beb8|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|1f62e0c590fe16999c12ea19db11973093295442d9720cc0b6dce97869c5202d|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|4f795b8ceb5f7e4e129d950b9f781a3048bbee9863a9d7d8f80b41c7477cd50f|region.redish markup.error.sublime_linter|32",
								"SL.pylint.Highlights.|27b90a1a6dcadbd5d622b7320e8ca68abf1044788e5e83fd68a19ae7f66f6b4d|region.redish markup.error.sublime_linter|32",
								"SL.pylint.Highlights.|f9dbeeb59e2fd59b865ec7349f48ae919980b8b7bd32d8ce57f94dbe29575de9|region.redish markup.error.sublime_linter|32",
								"SL.pylint.Highlights.|3a650bc92e81185866dca1c364c432bae7efbf67f3464e23f7bbf98d8a5141fa|region.yellowish markup.warning.sublime_linter|32",
								"sublime_linter.protected_regions",
								"SL.pylint.Highlights.|759f1c6fd809b7f39500605e94c1a54f73fe560c074f683a6b600137fb40bd53|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|4b7601a3be1eac1730793018aa1a80da9577d6cc7372d2a9692271156e4542d8|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|97c8fd374e13ff0cc32b73fe9d0cf75ac205648e44f14244d7311e69c5217af1|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|8d129b08ba10252dfda3f9cae67e1231fe064bf034965a2da72303edc0b0e004|region.redish markup.error.sublime_linter|32",
								"SL.pylint.Gutter.|region.yellowish markup.warning.sublime_linter|dot",
								"SL.pylint.Highlights.|c907381e2c7cc08fda90a91e9a0d28598c6a84b799cac0dff51b929d59550368|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|75593f1b89ca3b9482a91f5d1f4b21430385eaba8cda1438a7de0d2d9e55ee9b|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|a85d55927b6b5c0e54175f6723841164819bd2c1489ca6fc52f2e55c16ded09b|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|4aa8d8606516393f851bf5aa76591d638b3b48ebe54a22e930b9ed5e6196593a|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|0ad2659a5cd48e9b4c842f9b2dbb9c10bda8e99e271de7cbe6b148c7234c74e1|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|992b9ab7ecffaf21e28f4aa50c34ea8193d6aa93e113fc63c52bf7975234543b|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|6534617fc85b40af82718050b219f95c13e663c75b9ec6ba3045edcbc68f9d91|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|d87e5e356774280a02f891b667ae1caa102ab2a5566c27145a3db8361db7e634|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|fcb99506214fc9bc3f34e6c7de90510f0b43e469f2efa98e4f80cc239f789772|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|886bb4e3e7a4c38236556d06d8082776c47c781ba251f946f6e7322aa26fc14a|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|967c14925ffee2f186c1794e6ece6628b0ed07341d1f750a0f95fff6bcb04c60|region.redish markup.error.sublime_linter|32",
								"SL.pylint.Highlights.|97b3945a6266a5d7f38836f1832a1f0056640f1ce3f2fc4c89cbf54d98d6ad7c|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|3e47f68a4d6fa00d28c505135e5b10955b553be5aedc2f242daeab46ab990c7b|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|26cfff3c89770824e2829e210f6d7bf8664cf9946259ce27028b5830757f07c0|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|4c57a93e00808d94107da9927a68ec6ee41aeae6320188660d4155e746b0b352|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|fb720fb75c6cede8a5c06cbba0f2a59eca2849e8ac9ecee0eb6db947c479d3c1|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|bb4d6270ed8cdfaeb26ce144d072e84ba3ce2989cd2d5de3f001c7cdc0aa3cb2|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|dffbbab8011b0107681a64ad8b0c469eb7ee4c550d8d609b930965cdd9df5464|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Gutter.|region.redish markup.error.sublime_linter|dot",
								"SL.pylint.Highlights.|f49c60c52b49ca51717c7a7adfe7b5e937d4f873ef86c0d2895d61e55fecf031|region.yellowish markup.warning.sublime_linter|32",
								"SL.pylint.Highlights.|8ffb1f04f13eb6826bf5920164cfb55ea457a0f403162f9294f693bccbea4331|region.yellowish markup.warning.sublime_linter|32"
							],
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 37.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 28.0
	},
	"output.autopep8":
	{
		"height": 103.0
	},
	"output.exec":
	{
		"height": 109.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 180.0
	},
	"output.markdown":
	{
		"height": 103.0
	},
	"output.sftp":
	{
		"height": 29.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "deep_adv.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 368.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
